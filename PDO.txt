PDO (PHP Data Object)

-連接資料庫伺服器

	$dbConnect = "mysql:host=localhost;dbname=booking;port=3306";

        $dbUser = "root";

        $dbPw = "";

      --初始化一個PDO對象，構造函數的參數第一個就是我們的數據源，第二個是連接數據庫服務器的用戶，第三個參數是密碼。


        $db = new PDO($dbConnect, $dbUser, $dbPw);


    --編碼設定

        $db->exec("set names utf8");


      --PDO::exec()  方法會返回一個影響記錄的結果


--使用數據獲取功能

      --查詢操作主要

        PDO::query()  =>  主要是用於有記錄 結果返回的操作，特別是用於SELECT操作。

            執行方式：

              　$rs = $db-＞query("SELECT * FROM foo");

                while($row = $rs-＞fetch()){

                　　print_r($row);

                }


                或透過 $rs-＞fetchAll(); 將取得的數據一次取出成為2維陣列，但只以這種方式執行，會將資料取成

                    Array

                    ([0] =＞ Array(

                            　[id] =＞ 1

                            　[0] =＞ 1

                            　[name] =＞ heiyeluren

                            　[1] =＞ heiyeluren

                            　[gender] =＞ 男

                            　[2] =＞ 男

                            　[time] =＞ 2006-10-28 23:14:23

                            　[3] =＞ 2006-10-28 23:14:23

                            )

                    )

                一樣的內容數字和關聯索引各出現一次，導致資源浪費。




             因此可以透過 $db-＞setAttribute()宣告要取得的形式：

                    $db-＞setAttribute(PDO::ATTR_CASE, PDO::CASE_UPPER);

                    $rs = $db-＞query("SELECT * FROM foo");

                    $rs-＞setFetchMode(PDO::FETCH_ASSOC);

                    $result_arr = $rs-＞fetchAll();

                    print_r($result_arr);



                 --setAttribute() 方法是設置部分屬性，主要屬性有：

                    PDO::CASE_LOWER   => 強制列名是小寫

                　　PDO::CASE_NATURAL => 列名按照原始的方式

                　　PDO::CASE_UPPER   => 強制列名為大寫




              使用setFetchMode方法來設置獲取結果集的返回值的類型，同樣類型還有：



                　　PDO::FETCH_ASSOC  => 關聯數組形式

                　　PDO::FETCH_NUM    => 數字索引數組形式

                　　PDO::FETCH_BOTH   => 兩者數組形式都有，這是缺省的

                　　PDO::FETCH_OBJ    => 按照對象的形式，類似於以前的 mysql_fetch_object()



        PDO::exec()   =>  主要是針對沒有結果集合返回的操作，如INSERT、UPDATE、DELETE等操作，它返回的結果是當前操作影響的列數。

            	執行方式：
                
			$count = $db-＞exec("INSERT INTO foo SET name = heiyeluren,gender=男,time=NOW()");

                	echo $count;

        PDO::prepare()=>  主要是預處理操作，需要通過 $rs-＞execute() 來執行預處理裡面的SQL 語句，這個方法可以綁定參數，功能比較強大。

            	執行方式：

              		$rs = $db-＞prepare("SELECT * FROM foo where id = :id AND something = :someting");

                	$rs->bindParam('id',$id,PDO::PARAM_STR,12);

                	$rs->bindParam('something',$something);

                	$rs->execute();


               利用 bindParam的函式傳遞資料內容，此方法可以指定型態種類及長度

                透過execute執行



                或是直接使用 execute給值

               		$rs = $db-＞prepare("SELECT * FROM foo where id = ? AND something = ?");

               		$rs->execute([$id, $data]);

                要注意給值的順序，因值會依序取代?


      --獲取結果集操作主要

        	PDOStatement::fetchColumn() => 是獲取結果指定第一條記錄的某個字段，缺省是第一個字段。


        	PDOStatement::fetch()       => 是用來獲取"一條"記錄。


        	PDOStatement::fetchALL()    => 是獲取所有記錄集到一個2維陣列中，獲取結果可以通過PDOStatement:: setFetchMode來設置需要結果集合的類型。


    
      --兩個周邊的操作
        
		PDO::lastInsertId()         => 是返回上次插入操作，主鍵列類型是自動新增的最後的流水號ID。

       		PDOStatement::rowCount()    => 主要是用於 PDO::query()和PDO::prepare()進行DELETE、INSERT、UPDATE操作"影響的結果集"，對PDO::exec()方法和SELECT操作無效。 
					       因為 PDO::exec()方法本身就是取得影響的結果集。


--執行結束連線資源

	$db = NULL;


--PDO異常處理

	try {

    　		$db = new PDO(mysql:host=localhost;dbname=test, $user, $pass);

    　		$db = null;

    	}catch (PDOException $err){

    　		print "Error: " . $err-＞getMessage() . "＜br/＞";

    　		die();

    	}

資料來源：

	--http://easonyo.pixnet.net/blog/post/22966510-pdo-(php-data-object)-%E7%B0%A1%E6%98%93%E6%95%99%E5%AD%B8-