＃Ioc(Inversion of Control，即「控制反轉」)
	是一種設計思想。有利於開發效率，並且提高了Code的復用性，使測試變簡單。
	--透過第三方去創建要使用的對象
		傳統上，當A要使用B時，必須自己主動去創建對象B或者去使用已經創建的對象B，不論是創建還是使用，控制權都在A手上。
		而Ioc就好比仲介，讓AB之間失去的直接關係，當A要使用B時，Ioc會主動創建對象B丟給對象A需要的地方，此時控制權被反轉到了Ioc手中
	「誰控制誰，控制什麼，為何是反轉」
		誰控制誰: Ioc控制了對象
		控制什麼: 控制了外部資源獲取

	重點：Ioc重點在系統運行中能夠動態的向某個對象提供他所需要的其他對象，此部分是透過DI來實踐的

＃DI（Dependency Injection，「依賴注入」）
	--「被注入對象依賴IoC容器配置依賴對象」
		過去A要使用資料庫時必須編寫代碼已獲得Connection對象
		有了DI，A只需要告訴他需要一個Connection，A不必知道如何構造、何時構造，DI即會在適當的時候製造connection注射到A中。
	「誰依賴誰，為什麼需要依賴，誰注入誰，注入了什麼」
		誰依賴誰: 應用程式依賴IOC
		為什麼需要依賴: 應用程式需要IoC容器來提供對象需要的外部資源
		誰注入誰: IoC容器注入應用程式某個對象，應用程式依賴的對象
		注入了什麼: 注入某個對象所需要的外部資源（包括對象、資源、常量數據）

	重點：Ioc與DI是同一個概念的不同角度描述





資料來源：
	java學習筆記之Spring依賴注入和控制反轉 - https://read01.com/7O63GN.html